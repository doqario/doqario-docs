"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7473],{6452:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"type":"mdx","permalink":"/doqario-docs/format_v3","source":"@site/src/pages/format_v3.md","title":"Data Model Definition Documentation","description":"Overview","frontMatter":{},"unlisted":false}');var d=i(4848),s=i(8453);const r={},l="Data Model Definition Documentation",c={},a=[{value:"Overview",id:"overview",level:2},{value:"Basic Structure",id:"basic-structure",level:2},{value:"Core Components",id:"core-components",level:3},{value:"Entity Definition",id:"entity-definition",level:2},{value:"Field Definition",id:"field-definition",level:2},{value:"Field Types",id:"field-types",level:2},{value:"Validation Rules",id:"validation-rules",level:2},{value:"Relationships",id:"relationships",level:2},{value:"Nested Objects",id:"nested-objects",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Recommended Modifications",id:"recommended-modifications",level:2},{value:"Implementation Example with Modifications",id:"implementation-example-with-modifications",level:2},{value:"Best Practices",id:"best-practices",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"data-model-definition-documentation",children:"Data Model Definition Documentation"})}),"\n",(0,d.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,d.jsx)(n.p,{children:"This document describes the format and usage of the schema definition system for creating structured data models. The system allows defining entities, their properties, and relationships in a YAML-based format that can be used for documentation, validation, and code generation."}),"\n",(0,d.jsx)(n.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,d.jsxs)(n.p,{children:["The definition uses a YAML structure with an ",(0,d.jsx)(n.code,{children:"elements"})," array that contains entity type definitions. Each entity type has fields, validation rules, and relationship definitions."]}),"\n",(0,d.jsx)(n.h3,{id:"core-components",children:"Core Components"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:"elements:\n  - name: [entity_name]\n    identity: code  # Human-readable identifier\n    fields:\n      - name: code\n        type: string\n        required: true\n        # other field properties\n      - name: [field_name]\n        type: [field_type]\n        required: [boolean]\n        # other field properties\n"})}),"\n",(0,d.jsx)(n.h2,{id:"entity-definition",children:"Entity Definition"}),"\n",(0,d.jsx)(n.p,{children:"Each entity is defined as an element with the following properties:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Required"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"name"})}),(0,d.jsx)(n.td,{children:"Unique identifier for the entity type"}),(0,d.jsx)(n.td,{children:"Yes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"identity"})}),(0,d.jsxs)(n.td,{children:["Field name that serves as the primary identifier (typically ",(0,d.jsx)(n.code,{children:"code"}),")"]}),(0,d.jsx)(n.td,{children:"Yes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"fields"})}),(0,d.jsx)(n.td,{children:"Array of field definitions"}),(0,d.jsx)(n.td,{children:"Yes"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"field-definition",children:"Field Definition"}),"\n",(0,d.jsx)(n.p,{children:"Fields define the properties of an entity and have the following structure:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Property"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Required"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"name"})}),(0,d.jsx)(n.td,{children:"Field identifier"}),(0,d.jsx)(n.td,{children:"string"}),(0,d.jsx)(n.td,{children:"Yes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"type"})}),(0,d.jsx)(n.td,{children:"Data type"}),(0,d.jsx)(n.td,{children:"string, number, boolean, array, object"}),(0,d.jsx)(n.td,{children:"Yes"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"required"})}),(0,d.jsx)(n.td,{children:"Whether field is mandatory"}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:"No (defaults to false)"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"nullable"})}),(0,d.jsx)(n.td,{children:"Whether field can be null"}),(0,d.jsx)(n.td,{children:"boolean"}),(0,d.jsx)(n.td,{children:"No (defaults to false)"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"validation"})}),(0,d.jsx)(n.td,{children:"Validation rules"}),(0,d.jsx)(n.td,{children:"object"}),(0,d.jsx)(n.td,{children:"No"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"fields"})}),(0,d.jsx)(n.td,{children:"Nested fields (for object types)"}),(0,d.jsx)(n.td,{children:"array"}),(0,d.jsx)(n.td,{children:"For object types"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"field-types",children:"Field Types"}),"\n",(0,d.jsx)(n.p,{children:"The system supports the following field types:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Type"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Example"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"string"})}),(0,d.jsx)(n.td,{children:"Text value"}),(0,d.jsx)(n.td,{children:"Name, description, identifier"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"number"})}),(0,d.jsx)(n.td,{children:"Numeric value"}),(0,d.jsx)(n.td,{children:"Count, amount, score"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"boolean"})}),(0,d.jsx)(n.td,{children:"True/false value"}),(0,d.jsx)(n.td,{children:"Is active, is deleted"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"array"})}),(0,d.jsx)(n.td,{children:"List of values"}),(0,d.jsx)(n.td,{children:"Tags, categories, related items"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"object"})}),(0,d.jsx)(n.td,{children:"Nested structure"}),(0,d.jsx)(n.td,{children:"Address, metadata, settings"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"validation-rules",children:"Validation Rules"}),"\n",(0,d.jsx)(n.p,{children:"Validation rules define constraints on field values:"}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Rule"}),(0,d.jsx)(n.th,{children:"Description"}),(0,d.jsx)(n.th,{children:"Example"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"enumSource"})}),(0,d.jsx)(n.td,{children:"Reference to another entity type"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"enumSource: location"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsxs)(n.td,{children:[(0,d.jsx)(n.code,{children:"min"}),"/",(0,d.jsx)(n.code,{children:"max"})]}),(0,d.jsx)(n.td,{children:"Value range for numbers"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"min: 0, max: 100"})})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"pattern"})}),(0,d.jsx)(n.td,{children:"Regex pattern for strings"}),(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:'pattern: "^[A-Z][a-z]+$"'})})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"relationships",children:"Relationships"}),"\n",(0,d.jsx)(n.p,{children:"Relationships between entities are defined through fields with validation rules:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:"- name: location\n  type: string\n  validation:\n    enumSource: location  # References the 'location' entity\n"})}),"\n",(0,d.jsx)(n.p,{children:"For one-to-many relationships, use array types:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:"- name: employees\n  type: array\n  validation:\n    enumSource: employee  # References multiple 'employee' entities\n"})}),"\n",(0,d.jsx)(n.h2,{id:"nested-objects",children:"Nested Objects"}),"\n",(0,d.jsx)(n.p,{children:"Complex structures can be created using object types with nested fields:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:"- name: legacy\n  type: object\n  nullable: true\n  fields:\n    - name: description\n      type: string\n"})}),"\n",(0,d.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:"elements:\n  - name: department\n    identity: code\n    fields:\n      - name: code\n        type: string\n        required: true\n        description: \"Human-readable department code (e.g., 'HR', 'IT', 'FIN')\"\n      - name: name\n        type: string\n        required: true\n      - name: location\n        type: string\n        validation:\n          enumSource: location\n      - name: manager\n        type: string\n        validation:\n          enumSource: employee\n"})}),"\n",(0,d.jsx)(n.h2,{id:"recommended-modifications",children:"Recommended Modifications"}),"\n",(0,d.jsx)(n.p,{children:"Based on best practices for data modeling, the following modifications are recommended:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Add data types for numeric fields"}),": Specify integer, float, or decimal for numeric fields"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Add string formats"}),": Email, URL, date, datetime for specialized string fields"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Add documentation fields"}),": Add description for fields to improve self-documentation"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Add validation parameters"}),": Min/max length for strings, value ranges for numbers"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Versioning support"}),": Add schema version information"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Default values"}),": Support default values for fields"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"implementation-example-with-modifications",children:"Implementation Example with Modifications"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-yaml",children:'version: "1.0"\ndescription: "Organization data model"\nelements:\n  - name: employee\n    identity: code\n    description: "Employee information"\n    fields:\n      - name: code\n        type: string\n        required: true\n        description: "Human-readable employee code (e.g., \'JD001\', \'MS042\')"\n      - name: email\n        type: string\n        format: email\n        required: true\n        description: "Employee email address"\n      - name: hireDate\n        type: string\n        format: date\n        description: "Date employee was hired"\n      - name: salary\n        type: number\n        format: decimal\n        description: "Employee salary"\n        validation:\n          min: 0\n      - name: department\n        type: string\n        description: "Employee\'s department"\n        validation:\n          enumSource: department\n'})}),"\n",(0,d.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Use consistent naming"}),": Follow a consistent convention (camelCase, snake_case)"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Define clear relationships"}),": Make entity relationships explicit"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Provide meaningful descriptions"}),": Document purpose of entities and fields"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Consider validation needs"}),": Include all necessary validation for data integrity"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Think about extensibility"}),": Design the model to accommodate future changes"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"Balance specificity and flexibility"}),": Too rigid models are hard to maintain, too flexible ones provide inadequate validation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}}}]);